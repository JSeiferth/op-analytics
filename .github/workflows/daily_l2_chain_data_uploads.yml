name: Daily L2 Chain Data Uploads

# Controls when the workflow will run
on:
  # Run on a schedule - 12:01 AM every day
  schedule:
      - cron: 1 0 * * *
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  general-l2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Set up Python and Node.js
      - name: Set up Python and Node.js
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.11'
        # Set max space to see if this helps with timeouts
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        # Update the Node.js version to 16
          node-version: '16'

      - name: Install pipenv
        run: |
          python -m pip install pipenv

      # Add any missing dependencied to pipfile
      - name: Install Dependencies
        run: |
          pipenv install --dev

  # Generate .py files for each notebook
      - name: Generate py files
        working-directory: other_chains_tracking
        run: | 
          pipenv run jupyter nbconvert --to python pull_l2_activity.ipynb   
          pipenv run jupyter nbconvert --to python get_ethereum_chain_list.ipynb
          pipenv run jupyter nbconvert --to python get_dune_evms_info.ipynb
          pipenv run jupyter nbconvert --to python chain_tvl_trends.ipynb  
          pipenv run jupyter nbconvert --to python get_qualified_txs.ipynb
          pipenv run jupyter nbconvert --to python get_contract_labels.ipynb
          
  # Run py files
      - name: Run L2 Uploads
        working-directory: other_chains_tracking
        run: |
          pipenv run python pull_l2_activity.py
          pipenv run python get_ethereum_chain_list.py
          pipenv run python get_dune_evms_info.py
          pipenv run python chain_tvl_trends.py
          pipenv run python get_qualified_txs.py
          pipenv run python get_contract_labels.py
        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          FLIPSIDE_API_KEY: ${{ secrets.FLIPSIDE_API_KEY }}
          OP_CLICKHOUSE_HOST: ${{ secrets.OP_CLICKHOUSE_HOST }}
          OP_CLICKHOUSE_USER: ${{ secrets.OP_CLICKHOUSE_USER }}
          OP_CLICKHOUSE_PW: ${{ secrets.OP_CLICKHOUSE_PW }}
          OP_CLICKHOUSE_PORT: ${{ secrets.OP_CLICKHOUSE_PORT }}
          IS_RUNNING_LOCAL: ${{ secrets.IS_RUNNING_LOCAL }}
          BQ_APPLICATION_CREDENTIALS: ${{ secrets.BQ_APPLICATION_CREDENTIALS }}
          BQ_PROJECT_ID: ${{ secrets.BQ_PROJECT_ID }}
        
    # commit_results:
      # if: ${{ always() }} #Always runs even if prior jobs fail - so that one bad job doesn't f everything up.
      # needs: build #[build, app_fees, op_summer, total_tvl_flow]
      # runs-on: ubuntu-latest
      # steps:
        # Runs a set of commands using the runners shell
        # - name: Run a multi-line script
        #  run: |
        #    echo Add other actions to build,
        #    echo test, and deploy your project.

        # Commit and push output images
        # https://github.com/orgs/community/discussions/26672
      - name: Pull changes
        run: |
          git pull origin main
          
      - name: Commit files
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git add --all
          # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
          if [ -z "$(git status --porcelain)"]; then
              # echo "::set-output name=push::false"
              echo "push=false" >> $GITHUB_OUTPUT
          else
              git commit -m "GH Action Update - GS L2C" -a
              # echo "::set-output name=push::true"
              echo "push=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
            github_token: ${{ secrets.GITHUB_TOKEN }}

  # gs-dune-mb:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Set up Python and Node.js
  #     - name: Set up Python and Node.js
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.10.11'
  #       # Set max space to see if this helps with timeouts
  #       env:
  #         NODE_OPTIONS: '--max-old-space-size=4096'
  #       # Update the Node.js version to 16
  #         node-version: '16'

  #     - name: Install pipenv
  #       run: |
  #         python -m pip install pipenv

  #     # Add any missing dependencied to pipfile
  #     - name: Install Dependencies
  #       run: |
  #         pipenv install --dev

  # # Generate .py files for each notebook
  #     - name: Generate py files
  #       working-directory: op_chains_tracking
  #       run: |
  #               pipenv run jupyter nbconvert --to python mb_gs_all_uploads_from_api.ipynb
  #               pipenv run jupyter nbconvert --to python read_l2_transaction_qualification.ipynb
                
                  
  # # Run py
  #     - name: Run py
  #       working-directory: op_chains_tracking
  #       run: |
  #               pipenv run python mb_gs_all_uploads_from_api.py
  #               pipenv run python read_l2_transaction_qualification.py
  #       env:
  #         DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
  #         MS_METABASE_NAME: ${{ secrets.MS_METABASE_NAME }}
  #         MS_METABASE_PW: ${{ secrets.MS_METABASE_PW }}
  #         MS_METABASE_SESSION_ID: ${{ secrets.MS_METABASE_SESSION_ID }}
  #         IS_RUNNING_LOCAL: ${{ secrets.IS_RUNNING_LOCAL }}


  #   # commit_results:
  #     # if: ${{ always() }} #Always runs even if prior jobs fail - so that one bad job doesn't f everything up.
  #     # needs: build #[build, app_fees, op_summer, total_tvl_flow]
  #     # runs-on: ubuntu-latest
  #     # steps:
  #       # Runs a set of commands using the runners shell
  #       # - name: Run a multi-line script
  #       #  run: |
  #       #    echo Add other actions to build,
  #       #    echo test, and deploy your project.

  #       # Commit and push output images
  #       # https://github.com/orgs/community/discussions/26672
  #     - name: Pull changes
  #       run: |
  #         git pull origin main
          
  #     - name: Commit files
  #       id: commit
  #       run: |
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "github-actions"
  #         git add --all
  #         # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
  #         if [ -z "$(git status --porcelain)"]; then
  #             # echo "::set-output name=push::false"
  #             echo "push=false" >> $GITHUB_OUTPUT
  #         else
  #             git commit -m "GH Action Update - GS MB API" -a
  #             # echo "::set-output name=push::true"
  #             echo "push=true" >> $GITHUB_OUTPUT
  #         fi
  #       shell: bash
  #     - name: Push changes
  #       if: steps.commit.outputs.push == 'true'
  #       uses: ad-m/github-push-action@master
  #       with:
  #           github_token: ${{ secrets.GITHUB_TOKEN }}

  gs-ch:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Set up Python and Node.js
      - name: Set up Python and Node.js
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.11'
        # Set max space to see if this helps with timeouts
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        # Update the Node.js version to 16
          node-version: '16'

      - name: Install pipenv
        run: |
          python -m pip install pipenv

      # Add any missing dependencied to pipfile
      - name: Install Dependencies
        run: |
          pipenv install --dev

  # Generate .py files for each notebook
      - name: Generate py files
        working-directory: op_chains_tracking
        run: |
                pipenv run jupyter nbconvert --to python ch_gs_uploads.ipynb
                pipenv run jupyter nbconvert --to python dune_op_stack_chains_l1_data.ipynb
                
                  
  # Run py
      - name: Run py
        working-directory: op_chains_tracking
        run: |
                pipenv run python ch_gs_uploads.py
                pipenv run python dune_op_stack_chains_l1_data.py

        env:
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          OP_CLICKHOUSE_HOST: ${{ secrets.OP_CLICKHOUSE_HOST }}
          OP_CLICKHOUSE_USER: ${{ secrets.OP_CLICKHOUSE_USER }}
          OP_CLICKHOUSE_PW: ${{ secrets.OP_CLICKHOUSE_PW }}
          OP_CLICKHOUSE_PORT: ${{ secrets.OP_CLICKHOUSE_PORT }}
          IS_RUNNING_LOCAL: ${{ secrets.IS_RUNNING_LOCAL }}
          BQ_APPLICATION_CREDENTIALS: ${{ secrets.BQ_APPLICATION_CREDENTIALS }}
          BQ_PROJECT_ID: ${{ secrets.BQ_PROJECT_ID }}


    # commit_results:
      # if: ${{ always() }} #Always runs even if prior jobs fail - so that one bad job doesn't f everything up.
      # needs: build #[build, app_fees, op_summer, total_tvl_flow]
      # runs-on: ubuntu-latest
      # steps:
        # Runs a set of commands using the runners shell
        # - name: Run a multi-line script
        #  run: |
        #    echo Add other actions to build,
        #    echo test, and deploy your project.

        # Commit and push output images
        # https://github.com/orgs/community/discussions/26672
      - name: Pull changes
        run: |
          git pull origin main
      - name: Commit files
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git add --all
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit."
            echo "push=false" >> $GITHUB_OUTPUT
          else
            git commit -m "GH Action Update - Agg Uploads" -a
            echo "push=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
